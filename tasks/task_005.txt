# Task ID: 5
# Title: Implement War Status Data Fetcher and Storage
# Status: done
# Dependencies: 2, 3, 4
# Priority: medium
# Description: Create a module that fetches war status data from the API, transforms it, and stores it in the database.
# Details:
Implement a WarStatusFetcher class that:
1. Uses the API client to fetch current war status data
2. Uses the transformer to convert the data to database format
3. Uses the database manager to store the data
4. Handles errors and logs the process

Example implementation:
```python
class WarStatusFetcher:
    def __init__(self, api_client, transformer, db_manager):
        self.api_client = api_client
        self.transformer = transformer
        self.db_manager = db_manager
        self.logger = logging.getLogger(__name__)
        
    def fetch_and_store(self):
        try:
            self.logger.info("Fetching war status data")
            war_status_data = self.api_client.get_war_status()
            
            self.logger.info("Transforming war status data")
            transformed_data = self.transformer.transform(war_status_data)
            
            self.logger.info("Storing war status data")
            self.db_manager.upsert_war_status(transformed_data)
            
            self.logger.info("War status data updated successfully")
            return True
        except Exception as e:
            self.logger.error(f"Error updating war status data: {str(e)}")
            return False
```

# Test Strategy:
Create unit tests with mocked dependencies to verify the fetcher correctly orchestrates the API client, transformer, and database manager. Test error handling by simulating failures at each step. Create an integration test that runs the full fetch-transform-store pipeline with test data.
