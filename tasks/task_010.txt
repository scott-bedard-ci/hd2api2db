# Task ID: 10
# Title: Implement Scheduler and CLI Interface
# Status: done
# Dependencies: 8, 9
# Priority: medium
# Description: Create a command-line interface for running updates manually and implement a scheduler for automated daily updates.
# Details:
Implement a command-line interface that:
1. Allows running a full update manually
2. Provides options for updating specific data types
3. Includes help text and usage examples

Implement a scheduler that:
1. Uses a cron job or systemd timer to trigger daily updates
2. Includes a lockfile mechanism to prevent overlapping runs
3. Handles cleanup after completion or failure

Example implementation:
```python
import argparse
import sys
import os
import fcntl
import time

def create_cli():
    parser = argparse.ArgumentParser(description='Helldivers 2 Data Pipeline')
    parser.add_argument('--config', help='Path to config file')
    parser.add_argument('--update', action='store_true', help='Run a full data update')
    parser.add_argument('--update-war-status', action='store_true', help='Update war status only')
    parser.add_argument('--update-planets', action='store_true', help='Update planets only')
    parser.add_argument('--update-news', action='store_true', help='Update news only')
    parser.add_argument('--update-campaign', action='store_true', help='Update campaign only')
    parser.add_argument('--update-major-orders', action='store_true', help='Update major orders only')
    parser.add_argument('--update-planet-history', action='store_true', help='Update planet history only')
    parser.add_argument('--daemon', action='store_true', help='Run as a daemon with scheduled updates')
    parser.add_argument('--interval', type=int, help='Update interval in hours (default: 24)')
    return parser

def acquire_lock(lock_file):
    """Acquire an exclusive lock to prevent overlapping runs"""
    lock_fd = open(lock_file, 'w')
    try:
        fcntl.lockf(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_fd
    except IOError:
        return None

def release_lock(lock_fd):
    """Release the lock"""
    if lock_fd:
        fcntl.lockf(lock_fd, fcntl.LOCK_UN)
        lock_fd.close()

def run_daemon(orchestrator, config):
    """Run as a daemon with scheduled updates"""
    interval_hours = config.get('UPDATE_INTERVAL_HOURS', 24)
    interval_seconds = interval_hours * 3600
    lock_file = '/tmp/helldivers2_pipeline.lock'
    
    logger = logging.getLogger(__name__)
    logger.info(f"Starting daemon mode with {interval_hours} hour update interval")
    
    while True:
        lock_fd = acquire_lock(lock_file)
        if not lock_fd:
            logger.error("Another instance is already running. Exiting.")
            sys.exit(1)
        
        try:
            orchestrator.run_update()
        except Exception as e:
            logger.error(f"Error in daemon update: {str(e)}")
        finally:
            release_lock(lock_fd)
        
        logger.info(f"Sleeping for {interval_hours} hours until next update")
        time.sleep(interval_seconds)

def main():
    parser = create_cli()
    args = parser.parse_args()
    
    # Load config
    config = Config(args.config)
    
    # Setup logging
    setup_logging(config)
    logger = logging.getLogger(__name__)
    
    # Create orchestrator
    orchestrator = UpdateOrchestrator(config)
    
    if args.daemon:
        run_daemon(orchestrator, config)
    elif args.update:
        orchestrator.run_update()
    elif args.update_war_status:
        orchestrator.war_status_fetcher.fetch_and_store()
    elif args.update_planets:
        orchestrator.planet_fetcher.fetch_and_store()
    elif args.update_news:
        orchestrator.news_fetcher.fetch_and_store()
    elif args.update_campaign:
        orchestrator.campaign_fetcher.fetch_and_store()
    elif args.update_major_orders:
        orchestrator.major_orders_fetcher.fetch_and_store()
    elif args.update_planet_history:
        orchestrator.planet_history_fetcher.fetch_and_store()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
```

For cron setup, create a shell script wrapper and add it to crontab:
```bash
#!/bin/bash
# /usr/local/bin/helldivers2_update.sh
cd /path/to/helldivers2_pipeline
python main.py --update --config /path/to/config.json
```

Crontab entry for daily updates at 2 AM:
```
0 2 * * * /usr/local/bin/helldivers2_update.sh >> /var/log/helldivers2_cron.log 2>&1
```

# Test Strategy:
Test the CLI by running it with various command-line arguments and verifying the correct methods are called. Test the daemon mode with a short interval in a controlled environment. Test the lock mechanism by attempting to run multiple instances simultaneously.
